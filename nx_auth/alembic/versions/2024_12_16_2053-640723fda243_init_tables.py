"""init_tables

Revision ID: 640723fda243
Revises: fbd944cbcb63
Create Date: 2024-12-16 20:53:02.527006

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "640723fda243"
down_revision: Union[str, None] = "fbd944cbcb63"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "roles",
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("role_id"),
        sa.UniqueConstraint("title"),
        schema="auth",
    )
    op.create_table(
        "users",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("username", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=True),
        sa.Column("last_name", sa.String(length=50), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_stuff", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("outer_oauth_only", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
        sa.UniqueConstraint("username", "email", name="uq_username_email"),
        schema="auth",
        comment="Пользователи",
    )
    op.create_table(
        "user_roles",
        sa.Column("user_role_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("role_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["auth.roles.role_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["auth.users.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_role_id"),
        sa.UniqueConstraint("user_id", "role_id", name="uq_user_role"),
        schema="auth",
    )
    op.create_table(
        "user_social",
        sa.Column("user_social_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False, comment="UUID пользователя"),
        sa.Column(
            "provider",
            sa.String(length=40),
            nullable=False,
            comment="Наименование соц.сети",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["auth.users.user_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_social_id"),
        sa.UniqueConstraint("user_id", "provider", name="uq_user_id_provider"),
        schema="auth",
    )
    op.execute(
        """
            CREATE TABLE auth.login_history (
                log_id UUID NOT NULL,
                user_id UUID NOT NULL,
                is_active BOOLEAN NOT NULL,
                login_date TIMESTAMP NOT NULL,
                token VARCHAR(255) NOT NULL,
                PRIMARY KEY (log_id, login_date),
                CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES auth.users(user_id) ON DELETE CASCADE
            ) PARTITION BY RANGE (login_date);
        """
    )
    op.execute(
        """
            CREATE TABLE auth.login_history_2025_01_06 PARTITION OF auth.login_history
            FOR VALUES FROM ('2025-01-01') TO ('2025-07-01');
        """
    )
    op.execute(
        """
            CREATE TABLE auth.login_history_2025_07_12 PARTITION OF auth.login_history
            FOR VALUES FROM ('2025-07-01') TO ('2026-01-01');
        """
    )
    op.execute(
        """
            CREATE TABLE auth.login_history_default
            PARTITION OF auth.login_history DEFAULT;
        """
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TABLE IF EXISTS auth.login_history_default;")
    op.execute("DROP TABLE IF EXISTS auth.login_history_2025_01_06;")
    op.execute("DROP TABLE IF EXISTS auth.login_history_2025_07_12;")
    op.drop_table("users", schema="auth")
    op.drop_table("roles", schema="auth")
    # ### end Alembic commands ###
