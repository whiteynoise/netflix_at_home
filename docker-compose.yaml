x-env:
  &default-env
  env_file:
    - .env

services:

  database:
    image: postgres:16
    container_name: database
    <<: *default-env 
    volumes:
      - db_volume:/var/lib/postgresql/data
      - ./database/init_db.sql:/docker-entrypoint-initdb.d/init_data.sql
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 15s
      timeout: 15s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:9200" ]
      interval: 30s
      timeout: 30s
      retries: 3
    depends_on:
      - database

  redis:
    image: redis
    container_name: redis
    volumes:
      - redis_volume:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: nginx
    expose:
      - 8000
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static
    depends_on:
      - database
      - backend

  mongodb:
    image: mongo
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://localhost:27017 --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  nx_etl:
    build: nx_etl_pg_es/
    container_name: nx_etl
    <<: *default-env
    restart: always
    depends_on:
      - database
      - redis
      - elasticsearch

  nx_ugc:
    build:
      dockerfile: Dockerfile
      context: ./nx_ugc
    container_name: nx_ugc
    <<: *default-env
    depends_on:
      nx_auth:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - ./nx_ugc/src:/app/src
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8005/api/openapi || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  nx_backend:
    build:
      dockerfile: Dockerfile
      context: ./nx_content
    container_name: nx_backend
    <<: *default-env
    volumes:
      - ./nx_content/src:/app/src
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8002/api/openapi || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - elasticsearch # TODO вейтер дописать, иногда не дожидается

  nx_auth:
    build:
      dockerfile: Dockerfile
      context: ./nx_auth
    container_name: nx_auth
    <<: *default-env
    volumes:
      - ./nx_auth:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/api/openapi || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy

  ugc:
    build: nx_metrics/
    container_name: ugc
    <<: *default-env
    depends_on:
      - consumer_user
      - consumer_film
    environment:
        PYTHONUNBUFFERED: 1
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5000/ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  backend:
    build: nx_admin/
    container_name: backend
    <<: *default-env
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "localhost:8000/admin" ]
      interval: 15s
      timeout: 15s
      retries: 5
    volumes:
      - static_volume:/opt/app/static

  consumer_film:
    build: nx_etl_kafka_ch/
    environment:
      - TOPIC=film
      - GROUP_ID=film
      - PYTHONUNBUFFERED=1
      - CLICKHOUSE_NODE_MAIN=clickhouse-node1
      - BOOTSTRAP_SERVERS=kafka-0:9092
      - SENTRY_DSN=${SENTRY_DSN_ETL_KAFKA_CH}

  consumer_user:
    build: nx_etl_kafka_ch/
    environment:
      - TOPIC=user
      - GROUP_ID=user
      - PYTHONUNBUFFERED=1
      - CLICKHOUSE_NODE_MAIN=clickhouse-node1
      - BOOTSTRAP_SERVERS=kafka-0:9092
      - SENTRY_DSN=${SENTRY_DSN_ETL_KAFKA_CH}

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    restart: always
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    <<: *default-env
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:15672 || exit 1" ]
      interval: 60s
      timeout: 10s
      retries: 5

  events_admin:
    build: events_admin
    container_name: event_admin
    <<: *default-env
    volumes:
      - ./events_admin:/app
      - templates:/app/templates
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8088/api/openapi || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5

  scheduler_events:
    build: scheduler_events
    container_name: scheduler_events
    <<: *default-env
    volumes:
      - ./scheduler_events:/app
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8887/api/openapi || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5

  single_notification_api:
    build: notification_api
    container_name: single_notification_api
    <<: *default-env
    environment:
      - RMQ_QUEUE_NAME=instant_mail
    volumes:
      - ./notification_api:/app
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/api/openapi || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      - rabbitmq
      - events_admin

  massive_notification_api:
    build: notification_api
    container_name: massive_notification_api
    <<: *default-env
    environment:
      - RMQ_QUEUE_NAME=massive_mail
    volumes:
      - ./notification_api:/app
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8889/api/openapi || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      - rabbitmq
      - events_admin

  # для отправки другим путем добавьте инстанс для массовой и единичной рассылки

  mail_worker:
    build: nx_notification_worker
    container_name: mail_worker_instant
    command: python mail_worker.py
    <<: *default-env
    depends_on:
      - rabbitmq
    volumes:
      - templates:/app/templates

volumes:
  templates:
  redis_volume:
  es_data:
  db_volume:
  mongo_data:
  static_volume:
  rabbitmq: