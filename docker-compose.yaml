version: '3'

x-env:
  &default-env
  env_file:
    - .env

services:

  database:
    image: postgres:16
    container_name: database
    <<: *default-env 
    volumes:
      - db_volume:/var/lib/postgresql/data
      - ./database/init_db.sql:/docker-entrypoint-initdb.d/init_data.sql
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 15s
      timeout: 15s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:9200" ]
      interval: 30s
      timeout: 30s
      retries: 3
    depends_on:
      - database

  redis:
    image: redis
    container_name: redis
    volumes:
      - redis_volume:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  nx_etl:
    build: nx_etl/
    container_name: nx_etl
    <<: *default-env
    restart: always
    depends_on:
      - database
      - redis
      - elasticsearch

  nx_backend:
    build:
      dockerfile: Dockerfile
      context: ./nx_backend
    container_name: nx_backend
    <<: *default-env 
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/openapi || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - elasticsearch
  
  nx_auth:
    build:
      dockerfile: Dockerfile
      context: ./nx_auth
    container_name: nx_auth
    <<: *default-env
    volumes:
      - ./nx_auth:/app
    depends_on:
      - database
      - redis

  backend:
    build: movies_admin/
    container_name: backend
    <<: *default-env
    restart: always
    depends_on:
      - database
    healthcheck:
      test: [ "CMD", "curl", "--fail", "localhost:8000/admin" ]
      interval: 15s
      timeout: 15s
      retries: 5
    volumes:
      - static_volume:/opt/app/static

  nginx:
    image: nginx:latest
    container_name: frontend
    restart: always
    expose:
      - 8000
    ports:
      - "8000:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/configs:/etc/nginx/conf.d:ro
      - static_volume:/static
    depends_on:
      - database
      - backend

volumes:
  redis_volume:
  es_data:
  db_volume:
  static_volume: