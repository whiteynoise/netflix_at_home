version: '3'

services:

  database:
    image: postgres:16
    container_name: database
    env_file:
      - ./nx_db/db.env
    volumes:
      - db_volume:/var/lib/postgresql/data
      # - ./nx_db/init.sql:/docker-entrypoint-initdb.d/init_data.sql
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 15s
      timeout: 15s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:9200" ]
      interval: 30s
      timeout: 30s
      retries: 1
    depends_on:
      database:
        condition: service_healthy
    
  redis:
    image: redis
    container_name: redis
    volumes:
      - redis_volume:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  etl:
    build: nx_etl/
    container_name: etl
    env_file:
      - nx_etl/.env
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  app:
    build:
      dockerfile:  Dockerfile
      context: ./nx_backend
    container_name: app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/openapi || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  frontend:
    image: nginx:latest
    container_name: frontend
    expose:
      - 8000
    volumes:
      - ./nx_frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nx_frontend/configs:/etc/nginx/conf.d:ro
      - static_volume:/static
    restart: always
    depends_on:
      app:
        condition: service_healthy

volumes:
  static_volume:
  redis_volume:
  es_data:
  db_volume: